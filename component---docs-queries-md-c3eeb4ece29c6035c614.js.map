{"version":3,"sources":["webpack:///./docs/queries.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,iMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,mQACsD,mBAAGC,WAAW,KAAQ,CACxE,KAAQ,iBAD0C,cADtD,4DAIA,+FACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mGAOL,gEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uGAWL,gHAA+F,0BAAYA,WAAW,KAAvB,MAA/F,KAAmJ,0BAAYA,WAAW,KAAvB,MAAnJ,KAAuM,0BAAYA,WAAW,KAAvB,OAAvM,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0SAmBL,yMAAwL,0BAAYA,WAAW,KAAvB,eAAxL,mQAEA,wDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,isBA6CL,0EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,gDAOL,+CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4N,wLAiBTJ,EAAWK,gBAAiB","file":"component---docs-queries-md-c3eeb4ece29c6035c614.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/morse/Documents/GitHub/mongoke/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"generated-queries\"\n    }}>{`Generated queries`}</h1>\n    <p>{`Every type defined in the configurations and associated with a collection will generate a graphql query for a single document and for many documents in the form of a connection.\nThe best way to explore the queries shape is follow the `}<a parentName=\"p\" {...{\n        \"href\": \"../README.md\"\n      }}>{`quickstart`}</a>{` guide and open graphiql to explore the possible queries`}</p>\n    <p>{`For example having the following type you can do the following queries`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`User:\n    type: \"user\"\n    _id: ID\n    name: Str\n    surname: Str\n    friends_ids: [ID]\n`}</code></pre>\n    <p>{`Some examples pf queries for this type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`\n{\n    user(where: {name: {eq: \"jon\"}) {\n        _id\n        name\n        surname\n    }\n}\n`}</code></pre>\n    <p>{`Every type generates a where argument where you can query the mongodb database with the `}<inlineCode parentName=\"p\">{`eq`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`in`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`nin`}</inlineCode>{` and other mongodb operators.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`\n{\n    users(first: 20, after: \"Micky\", cursosorField: name) {\n        nodes {\n            _id\n            name\n            surname\n        }\n        pageInfo {\n            endCursor\n            startCursor\n            hasNextPage\n            hasPreviousPage\n        }\n    }\n}\n`}</code></pre>\n    <p>{`The connections have additional arguments to handle pagination, the documents are always sorted ascending on the _id field if present, you can change the sorting field with the `}<inlineCode parentName=\"p\">{`cursorField`}</inlineCode>{` argument.\nThe pageInfo field returns the information to handle pagination, the endCursor and startCursor fields can be any scalar type based on the cursorField argument, they are not obfuscated to make it easier to see what is happening inside your app.`}</p>\n    <p>{`The generated graphql is below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`extend type Query {\n    user(\n        where: UserWhere,\n    ): User\n\n    users(\n        where: UserWhere, \n        cursorField: UserFields, \n        first: Int, \n        last: Int, \n        after: AnyScalar, \n        before: AnyScalar\n    ): UserConnection\n\n}\n\ntype UserConnection {\n    nodes: [User]\n    pageInfo: PageInfo\n}\n\ninput UserWhere { \n    and: [UserWhere]\n    or: [UserWhere]\n    type: WhereString\n    _id: WhereID\n    name: WhereString\n    surname: WhereString\n}\n\nenum UserFields {\n    type\n    _id\n    name\n    surname\n}\ntype PageInfo {\n    endCursor: AnyScalar\n    startCursor: AnyScalar\n    hasNextPage: Boolean\n    hasPreviousPage: Boolean\n}\n`}</code></pre>\n    <p>{`The relations are similar, for a to_one relation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`\nextend type User {\n    father: User\n}\n`}</code></pre>\n    <p>{`For to_many relations:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`extend type User {\n   friends(\n       where: UserWhere, \n       cursorField: UserFields, \n       first: Int, \n       last: Int, \n       after: AnyScalar, \n       before: AnyScalar\n    ): UserConnection\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}