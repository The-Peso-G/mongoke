(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{Gux5:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return c}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("FlsD"),n("q1tI");var i=n("E/Ix"),a=n("hhGP");n("qKvR");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/configuration.md"}});var l={_frontmatter:o},s=a.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(i.b)(s,r({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"configuration"},"Configuration"),Object(i.b)("p",null,"Mongoke defines its entire configuration in a yaml file that can be used to generate the entire graphql server.\nThis configuration can be used inside the docker image in the default path ",Object(i.b)("inlineCode",{parentName:"p"},"/config.yml"),"."),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-yml"}),'Configuration:\n    schema?: Str\n    schema_url?: Url\n    schema_path?: Str\n    types:\n        ...:\n            collection: Str\n            exposed?: Bool\n            pipeline?: [Any]\n            disambiguations?:\n                ...: Str\n            guards?: [\n                expression: Str\n                excluded?: [Str]\n                when?: "after" | "before"\n            ]\n    relations?: [\n        from: Str\n        to: Str\n        relation_type: "to_many" | "to_one"\n        field: Str\n        where: Any\n    ]\n    jwt?:\n        secret?: Str\n        header_name?: Str # default is "Authorization"\n        header_scheme?: Str # default is "Bearer"\n        required?: Bool\n        algorithms?: ["H256" | "HS512" | "HS384" | "RS256" | "RS384" | "RS512" | "ES256" | "ES384" | "ES521" | "ES512" | "PS256" | "PS384" | "PS512"]\n\nUrl: Str\n')),Object(i.b)("h2",{id:"index"},"Index"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",r({parentName:"li"},{href:"#Skema"}),"skema")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",r({parentName:"li"},{href:"#Types"}),"types")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",r({parentName:"li"},{href:"#Guards"}),"guards")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",r({parentName:"li"},{href:"#Relations"}),"relations")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",r({parentName:"li"},{href:"#Jwt-configuration"}),"jwt"))),Object(i.b)("h1",{id:"types"},"Types"),Object(i.b)("p",null,"Individual types config defined as an object where keys are the type names and values are the type configuration."),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{}),'types:\n    ...:\n        collection: Str\n        exposed?: Bool\n        pipeline?: [Any]\n        guards?: [\n            expression: Str\n            when?: "after" | "before"\n            excluded?: [Str]\n        ]\n        disambiguations?:\n            ...: Str\n')),Object(i.b)("h3",{id:"collection"},"collection"),Object(i.b)("p",null,"Defines to what collection the type is associated with"),Object(i.b)("h3",{id:"exposed"},"exposed"),Object(i.b)("p",null,"Defines if the type is exposed to graphql, useful when you whant to use certain types only as relations"),Object(i.b)("h3",{id:"pipeline"},"pipeline"),Object(i.b)("p",null,"custom mongodb pipeline to execute during the database query"),Object(i.b)("h3",{id:"disabiguations"},"disabiguations"),Object(i.b)("p",null,"necessary when querying a union type, to determine the actual type.\nit is an object where keys are type names and values are expressions.\nThe expressions are evaluated until one is found true and the right __type is applied"),Object(i.b)("h1",{id:"guards"},"Guards"),Object(i.b)("p",null,"List of expressions to limit the access of the type fields to only certain users, based on jwt payload and the document data."),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{}),'guards?: [\n    expression: Str\n    excluded?: [Str]\n    when?: "after" | "before"\n]\n')),Object(i.b)("h3",{id:"when"},"when"),Object(i.b)("p",null,"decides if you want to evaluate the expression before or after querying the database, if you use before you save resources but have access to only the user jwt (if any) and not to the document to decide if user is authorized "),Object(i.b)("h3",{id:"expression"},"expression"),Object(i.b)("p",null,"python expression that can evaluate to true if you want to give user access to the type, expression is evaluated in python and has access to "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"x: the current document, available only if using when=after"),Object(i.b)("li",{parentName:"ul"},"jwt: the user jwt payload, can contain whatever you put inside it, by default extracted from the Authorization header and not verified.")),Object(i.b)("h3",{id:"excluded"},"excluded"),Object(i.b)("p",null,"By default the guards give access to all the document fields, you can limit the fileds you give access to by putting them inside ",Object(i.b)("inlineCode",{parentName:"p"},"exclude"),".\nTo implement different levels of authorization with access to different fields you can use many guards where the most protected is the first so that the evaluation stops at the weakest permissions required possible."),Object(i.b)("h1",{id:"relations"},"Relations"),Object(i.b)("p",null,"Defined as a list of configurations to add connections between types."),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{}),'relations?: [\n    from: Str\n    to: Str\n    relation_type: "to_many" | "to_one"\n    field: Str\n    where: Any # the mongodb query\n]\n')),Object(i.b)("h3",{id:"from"},"from"),Object(i.b)("p",null,"The type where the relation's field is added"),Object(i.b)("h3",{id:"to"},"to"),Object(i.b)("p",null,"The type the relation leads to"),Object(i.b)("h3",{id:"field"},"field"),Object(i.b)("p",null,"The field added to the ",Object(i.b)("inlineCode",{parentName:"p"},"from")," type to connect the ",Object(i.b)("inlineCode",{parentName:"p"},"to")," type"),Object(i.b)("h3",{id:"relation_type"},"relation_type"),Object(i.b)("p",null,'if "to_one" the field in graphql will be a simple type reference and can be queried with'),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-gql"}),"{\n    owner {\n        email\n        pet {\n            name\n        }\n    }\n}\n")),Object(i.b)("p",null,'If "to_many" the field will resolve to a connection and can be queried like this'),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-gql"}),"{\n    zoo {\n        pets(first: 10) {\n            nodes {\n                name\n            }\n        }\n    }\n}\n")),Object(i.b)("h3",{id:"where"},"where"),Object(i.b)("p",null,"The mongodb where query to find the related documents, you can evaluate custom python code inside the ${{ }} and have access to parent: the ",Object(i.b)("inlineCode",{parentName:"p"},"from")," document as a python dict.\nThe code inside ${{ }} will be evaluated during every query that needs the relation and the evaluation result will be used to query the ",Object(i.b)("inlineCode",{parentName:"p"},"to")," collection."),Object(i.b)("h1",{id:"jwt-configuration"},"Jwt configuration"),Object(i.b)("p",null,"Configure how to handle jwt authentication, by default the jwt is not verified, to verify it add the ",Object(i.b)("inlineCode",{parentName:"p"},"secret")," field with the secret used to sign the jwt. You can require a jwt for all the query fields adding the ",Object(i.b)("inlineCode",{parentName:"p"},"required")," field."),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{}),'    jwt?:\n        secret?: Str\n        header_name?: Str # default is "Authorization"\n        header_scheme?: Str # default is "Bearer"\n        required?: Bool\n        algorithms?: ["H256" | "HS512" | "HS384" | "RS256" | "RS384" | "RS512" | "ES256" | "ES384" | "ES521" | "ES512" | "PS256" | "PS384" | "PS512"]\n')),Object(i.b)("h3",{id:"required"},"required"),Object(i.b)("p",null,"if specified, only users with jwt signed with the right secret have access to the resources, needs secret to work.\nBy default the secret is not required and not verified."),Object(i.b)("h3",{id:"secret"},"secret"),Object(i.b)("p",null,"Used when required is present to check if jwt is signed"),Object(i.b)("h3",{id:"algorithms"},"algorithms"),Object(i.b)("p",null,"A list of algotihtm to decode the jwt, to see the full list chech the python pyJwt library"))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/configuration.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-configuration-md-52d7f332eb3670b7a06b.js.map