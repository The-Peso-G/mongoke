
extend type Query {
    User(
        where: UserWhere,
    ): User

    UserNodes(
        where: UserWhere, 
        cursorField: UserFields, 
        first: Int, 
        last: Int, 
        after: AnyScalar, 
        before: AnyScalar,
        direction: Direction
    ): UserConnection!
}

type UserConnection {
    nodes: [User]!
    edges: [UserEdge]!
    pageInfo: PageInfo!
}

type UserEdge {
    node: User
    cursor: AnyScalar
}

input UserWhere { 
    and: [UserWhere]
    or: [UserWhere]
    # $not: [UserWhere]
    type: WhereString
    _id: WhereObjectId
    name: WhereString
    surname: WhereString
    url: WhereUrl
    letter: WhereLetter
}

enum UserFields {
    type
    _id
    name
    surname
    url
    letter
}
