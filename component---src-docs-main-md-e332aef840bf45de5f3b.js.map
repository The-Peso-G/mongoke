{"version":3,"sources":["webpack:///./src/docs/main.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,kMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,yLACA,0NACA,iBAAQ,CACN,GAAM,wBADR,wBAGA,8EACA,iBAAQ,CACN,GAAM,2EADR,4EAGA,uHACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,0fA8BL,iBAAQ,CACN,GAAM,wDADR,cAEkB,0BAAYA,WAAW,MAAvB,WAFlB,uCAGA,2FAA0E,0BAAYA,WAAW,KAAvB,sBAA1E,uBAAgK,0BAAYA,WAAW,KAAvB,qBAAhK,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gVAmBL,iBAAQ,CACN,GAAM,iGADR,uDAE2D,mBAAGA,WAAW,MAAS,CAC9E,KAAQ,mCAD+C,kCAF3D,qBAKA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,sa,yLA8BTJ,EAAWK,gBAAiB","file":"component---src-docs-main-md-e332aef840bf45de5f3b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/morse/Documents/GitHub/mongoke/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p>{`Mongoke generates a graphql server based on a configuration file that describes the shape of the database via graphql types and their corresponding collections.`}</p>\n    <p>{`Every type defined in the schema must be associated with a collection to be accessible via graphql, every type has a configuration to specify its collection and optionally authorization guards.`}</p>\n    <h1 {...{\n      \"id\": \"using-docker-compose\"\n    }}>{`Using Docker Compose`}</h1>\n    <p>{`The fastest way to try Mongoke is via docker-compose.`}</p>\n    <h3 {...{\n      \"id\": \"1-write-the-configuration-to-describe-the-database-schema-and-relations\"\n    }}>{`1. Write the configuration to describe the database schema and relations`}</h3>\n    <p>{`The ObjectId scalar is already defined by default, it is converted to string when sent as json`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`# ./mongoke.yml\nschema: |\n    type User {\n        _id: ObjectId\n        username: String\n        email: String\n    }\n    type BlogPost {\n        _id: ObjectId\n        author_id: ObjectId\n        title: String\n        content: String\n    }\n\ntypes:\n    User:\n        collection: users\n    BlogPost:\n        collection: posts\n\nrelations:\n    - field: posts\n      from: User\n      to: BlogPost\n      relation_type: to_many\n      where:\n          author_id: \\${{ parent['_id'] }}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"2-run-the-mongoke-image-with-the-above-configuration\"\n    }}>{`2. Run the `}<inlineCode parentName=\"h3\">{`mongoke`}</inlineCode>{` image with the above configuration`}</h3>\n    <p>{`To start the container mount copy paste the following content in a `}<inlineCode parentName=\"p\">{`docker-compose.yml`}</inlineCode>{` file, then execute `}<inlineCode parentName=\"p\">{`docker-compose up`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`# docker-compose.yml\nversion: '3'\n\nservices:\n    mongoke:\n        ports:\n            - 4000:80\n        image: mongoke/mongoke\n        environment:\n            DB_URL: mongodb://mongo/db\n        volumes:\n            - ./mongoke.yml:/conf.yml\n    mongo:\n        image: mongo\n        logging:\n            driver: none\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"3-query-the-generated-service-via-graphql-or-go-to-httplocalhost4000graphiql-to-open-graphiql\"\n    }}>{`3. Query the generated service via graphql or go to `}<a parentName=\"h3\" {...{\n        \"href\": \"http://localhost:4000/graphiql\"\n      }}>{`http://localhost:4000/graphiql`}</a>{` to open graphiql`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n    user(where: { username: { eq: \"Mike\" } }) {\n        _id\n        username\n        email\n        posts {\n            nodes {\n                title\n            }\n        }\n    }\n\n    blogPosts(first: 10, after: \"Post 1\", cursorField: title) {\n        nodes {\n            title\n            content\n        }\n        pageInfo {\n            endCursor\n            hasNextPage\n        }\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}